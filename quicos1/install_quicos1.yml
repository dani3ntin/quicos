#
#   OpenBACH is a generic testbed able to control/configure multiple
#   network/physical entities (under test) and collect data from them. It is
#   composed of an Auditorium (HMIs), a Controller, a Collector and multiple
#   Agents (one for each network entity that wants to be tested).
#
#
#   Copyright Â© 2016-2023 CNES
#
#
#   This file is part of the OpenBACH testbed.
#
#
#   OpenBACH is a free software : you can redistribute it and/or modify it under the
#   terms of the GNU General Public License as published by the Free Software
#   Foundation, either version 3 of the License, or (at your option) any later
#   version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT
#   ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
#   FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#   details.
#
#   You should have received a copy of the GNU General Public License along with
#   this program. If not, see http://www.gnu.org/licenses/.
#
#
#
#   @file     install_quic.yml
#   @brief    Playbook that install the Job quic
#   @author   Francklin SIMO <armelfrancklin.simotegueu@viveris.fr>


---
- name: Init global variables
  set_fact:
    domain: quicos1.openbach.com
    ngtcp2:
      git_repo: https://github.com/ngtcp2/ngtcp2
      version: HEAD
    picoquic:
      git_repo: https://github.com/private-octopus/picoquic
      version: HEAD
    quicly:
      git_repo: https://github.com/h2o/quicly
      version: HEAD
    cacheable: yes

- name: Install software properties common
  apt:
    pkg:
      - software-properties-common
    state: present
    update_cache: no
  become: yes
  environment: "{{ openbach_proxies }}"

- name: Add repositories into sources list
  apt_repository:
    repo: ppa:ubuntu-toolchain-r/test
    state: present
    update_cache: yes
  become: yes
  environment: "{{ openbach_proxies }}"

# Create job repository and deploy files
- name: Create the quic job repository
  file: path=/opt/openbach/agent/jobs/quicos1 state=directory mode=0755

# Install ngtcp2
- name: Install ngtcp2 requirements
  apt:
    pkg:
      - g++-12
      - gcc-12
      - pkg-config
      - make
      - autoconf
      - automake
      - autotools-dev
      - libtool
      - libcunit1-dev
      - zlib1g-dev
      - libssl-dev
      - libxml2-dev
      - libev-dev
      - libevent-dev
      - libjansson-dev
      - libjemalloc-dev
      - libsystemd-dev
      - libc-ares-dev
      - cython3
      - python3-dev
      - checkinstall
      - git
    state: present
    update_cache: no
  become: yes
  environment: "{{ openbach_proxies }}"

- name: Clone OpenSSL for QUIC from github
  git:
    repo: https://github.com/quictls/openssl
    depth: 1
    version: OpenSSL_1_1_1l+quic
    dest: /tmp/OpenSSL_1_1_1l+quic
    force: yes
  environment: "{{ openbach_proxies }}"

- name: Compile and install lib OpenSSL for QUIC
  shell: "{{ item }} chdir=/tmp/OpenSSL_1_1_1l+quic"
  with_items:
    - "./config enable-tls1_3 CC=gcc-12 CXX=g++-12 --prefix=/opt/openbach/agent/jobs/quicos1 LDFLAGS=\"-L/opt/openbach/agent/jobs/quicos1/lib\""
    - "make -j$(nproc)"
    - "make install_sw"

- name: Clone ghttp3 from github
  git:
    repo: https://github.com/ngtcp2/nghttp3
    dest: /tmp/nghttp3
    force: yes
    version: HEAD
  environment: "{{ openbach_proxies }}"

- name: Compile and install lib nghttp3
  shell: "{{ item }} chdir=/tmp/nghttp3/"
  with_items:
    - "autoreconf -i"
    - "./configure CC=gcc-12 CXX=g++-12 CXXFLAGS=\"-I/opt/openbach/agent/jobs/quicos1/include\" LDFLAGS=\"-L/opt/openbach/agent/jobs/quicos1/lib -Wl,-rpath,/opt/openbach/agent/jobs/quicos1/lib\" --prefix=/opt/openbach/agent/jobs/quicos1"
    - "make -j$(nproc) check"
    - "make install"

- name: Clone ngtcp2 from github
  git:
    repo: "{{ ngtcp2.git_repo }}"
    dest: /tmp/ngtcp2
    force: yes
    version: "{{ ngtcp2.version }}"
  environment: "{{ openbach_proxies }}"

- name: Compile and install ngtcp2
  shell: "{{ item }} chdir=/tmp/ngtcp2/"
  with_items:
    - "autoreconf -i"
    - "./configure CC=gcc-12 CXX=g++-12 PKG_CONFIG_PATH=/opt/openbach/agent/jobs/quicos1/lib/pkgconfig CXXFLAGS=\"-I/opt/openbach/agent/jobs/quicos1/include\" LDFLAGS=\"-Wl,-rpath,/opt/openbach/agent/jobs/quicos1/lib\" --prefix=/opt/openbach/agent/jobs/quicos1"
    - "make -j$(nproc) check"
    - "make install"

- name: Launch ldconfig
  shell: "{{ item }} chdir=/tmp/ngtcp2/"
  with_items:
    - "ldconfig"
  become: yes

- name: Install ngtcp2 binaries
  copy: src={{ item.file }} dest=/usr/local/bin/{{ item.name }}  mode={{ item.mode }} remote_src=yes
  with_items:
    - { file: '/tmp/ngtcp2/examples/qtlsclient', mode: '0755', name: 'ngtcp2_client' }
    - { file: '/tmp/ngtcp2/examples/qtlsserver', mode: '0755', name: 'ngtcp2_server' }
  become: yes

# Install picoquic
- name: Install picoquic requirements
  apt:
    pkg:
      - cmake
      - build-essential
      - pkg-config
      - libssl-dev
      - libbrotli-dev
      - libscope-guard-perl
      - libtest-tcp-perl
      - git
    state: present
    update_cache: no
  become: yes
  environment: "{{ openbach_proxies }}"

- name: Clone Picotls for QUIC from github
  git:
    repo: https://github.com/h2o/picotls
    version: HEAD
    dest: /tmp/picotls
    force: yes 
    recursive: yes
  environment: "{{ openbach_proxies }}"

- name: Set environment variables and Build picotls
  environment: 
    CC: gcc-12
    CXX: g++-12
    #CXXFLAGS: "-I/opt/openbach/agent/jobs/quicos_new/include"
    #LDFLAGS: "-L/opt/openbach/agent/jobs/quicos_new/lib -Wl"
  shell: "{{ item }} chdir=/tmp/picotls"
  with_items:
    - "cmake . -DCMAKE_INSTALL_PREFIX=/opt/openbach/agent/jobs/quicos1"
    - "make preinstall" 
    - "make"
    - "make check"

- name: Clone Picoquic from github
  git:
    repo: "{{ picoquic.git_repo }}"
    dest: /tmp/picoquic
    force: yes
    version: "{{ picoquic.version }}"
  environment: "{{ openbach_proxies }}"

- name: Build picoquic
  environment:
    CC: gcc-12
    CXX: g++-12
    #CXXFLAGS: "-I/opt/openbach/agent/jobs/quicos_new/include"
    #LDFLAGS: "-L/opt/openbach/agent/jobs/quicos_new/lib -Wl"
  shell: "{{ item }} chdir=/tmp/picoquic"
  with_items:
    - "cmake . -DCMAKE_INSTALL_PREFIX=/opt/openbach/agent/jobs/quicos1"
    - "make preinstall"
    - "make"

- name: Install picoquic binaries
  copy: src={{ item.file }} dest=/usr/local/bin/{{ item.name }}  mode={{ item.mode }} remote_src=yes
  with_items:
    - { file: '/tmp/picoquic/picoquicdemo', mode: '0755', name: 'picoquic' }
  become: yes

# Install quicly
- name: Install quicly requirements
  apt:
    pkg:
      - cmake
      - build-essential
      - pkg-config
      - libssl-dev
      - git
    state: present
    update_cache: no
  become: yes
  environment: "{{ openbach_proxies }}"

- name: Clone quicly github
  git:
    repo: "{{ quicly.git_repo }}"
    dest: /tmp/quicly
    force: yes
    version: "{{ quicly.version }}"
    recursive: yes
  environment: "{{ openbach_proxies }}"

- name: Set environment variables and Build quicly
  environment:
    CC: gcc-12
    CXX: g++-12
    #CXXFLAGS: "-I/opt/openbach/agent/jobs/quicos_new/include"
    #LDFLAGS: "-L/opt/openbach/agent/jobs/quicos_new/lib -Wl,-rpath,/opt/openbach/agent/jobs/quicos_new/lib"
  shell: "{{ item }} chdir=/tmp/quicly"
  with_items:
    - "cmake . -DCMAKE_INSTALL_PREFIX=/opt/openbach/agent/jobs/quicos1"
    - "make"

- name: Install quicly binaries
  copy: src={{ item.file }} dest=/usr/local/bin/{{ item.name }}  mode={{ item.mode }} remote_src=yes
  with_items:
    - { file: '/tmp/quicly/cli', mode: '0755', name: 'quicly' }
  become: yes

- name: Copy files into job repository
  copy: src={{ item.file }} dest=/opt/openbach/agent/jobs/quicos1/ mode={{ item.mode }}
  with_items:
    - { file: 'quicos1.help', mode: '0644' }
    - { file: 'quicos1_rstats_filter.conf', mode: '0644' }
    - { file: 'quicos1.py', mode: '0755' }

- name: Create the HTDOCS DIR
  file: path=/var/www/{{ domain }} state=directory
  become: yes

- name: Create size specific files
  shell: base64 /dev/urandom | head -c {{ item.size }} > /var/www/{{ domain }}/{{ item.size }}_file.txt
  with_items:
    - { size: '500K' }
    - { size: '1M' }
    - { size: '10M' }
    - { size: '100M' }
  become: yes

# Install keys
- name: Install pyOpenSSL
  pip: name=pyopenssl executable=pip3 state=latest
  become: yes
  environment: "{{ openbach_proxies }}"

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  openssl_privatekey:
    path: /etc/ssl/private/{{ domain }}.pem 
  become: yes

- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: /etc/ssl/certs/{{ domain }}.csr
    privatekey_path: /etc/ssl/private/{{ domain }}.pem
    common_name: "{{ domain }}"
  become: yes

- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
    path: /etc/ssl/certs/{{ domain }}.crt
    privatekey_path: /etc/ssl/private/{{ domain }}.pem
    csr_path: /etc/ssl/certs/{{ domain }}.csr
    provider: selfsigned
  become: yes

